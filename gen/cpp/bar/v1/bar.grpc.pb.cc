// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bar/v1/bar.proto

#include "bar/v1/bar.pb.h"
#include "bar/v1/bar.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bar {
namespace v1 {

static const char* BarService_method_names[] = {
  "/bar.v1.BarService/GetBar",
  "/bar.v1.BarService/GetBaz",
};

std::unique_ptr< BarService::Stub> BarService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BarService::Stub> stub(new BarService::Stub(channel, options));
  return stub;
}

BarService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBar_(BarService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBaz_(BarService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BarService::Stub::GetBar(::grpc::ClientContext* context, const ::bar::v1::GetBarRequest& request, ::bar::v1::GetBarResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bar::v1::GetBarRequest, ::bar::v1::GetBarResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBar_, context, request, response);
}

void BarService::Stub::async::GetBar(::grpc::ClientContext* context, const ::bar::v1::GetBarRequest* request, ::bar::v1::GetBarResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bar::v1::GetBarRequest, ::bar::v1::GetBarResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBar_, context, request, response, std::move(f));
}

void BarService::Stub::async::GetBar(::grpc::ClientContext* context, const ::bar::v1::GetBarRequest* request, ::bar::v1::GetBarResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bar::v1::GetBarResponse>* BarService::Stub::PrepareAsyncGetBarRaw(::grpc::ClientContext* context, const ::bar::v1::GetBarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bar::v1::GetBarResponse, ::bar::v1::GetBarRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bar::v1::GetBarResponse>* BarService::Stub::AsyncGetBarRaw(::grpc::ClientContext* context, const ::bar::v1::GetBarRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BarService::Stub::GetBaz(::grpc::ClientContext* context, const ::bar::v1::GetBazRequest& request, ::bar::v1::GetBazResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bar::v1::GetBazRequest, ::bar::v1::GetBazResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBaz_, context, request, response);
}

void BarService::Stub::async::GetBaz(::grpc::ClientContext* context, const ::bar::v1::GetBazRequest* request, ::bar::v1::GetBazResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bar::v1::GetBazRequest, ::bar::v1::GetBazResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaz_, context, request, response, std::move(f));
}

void BarService::Stub::async::GetBaz(::grpc::ClientContext* context, const ::bar::v1::GetBazRequest* request, ::bar::v1::GetBazResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaz_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bar::v1::GetBazResponse>* BarService::Stub::PrepareAsyncGetBazRaw(::grpc::ClientContext* context, const ::bar::v1::GetBazRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bar::v1::GetBazResponse, ::bar::v1::GetBazRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBaz_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bar::v1::GetBazResponse>* BarService::Stub::AsyncGetBazRaw(::grpc::ClientContext* context, const ::bar::v1::GetBazRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBazRaw(context, request, cq);
  result->StartCall();
  return result;
}

BarService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BarService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BarService::Service, ::bar::v1::GetBarRequest, ::bar::v1::GetBarResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bar::v1::GetBarRequest* req,
             ::bar::v1::GetBarResponse* resp) {
               return service->GetBar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BarService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BarService::Service, ::bar::v1::GetBazRequest, ::bar::v1::GetBazResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bar::v1::GetBazRequest* req,
             ::bar::v1::GetBazResponse* resp) {
               return service->GetBaz(ctx, req, resp);
             }, this)));
}

BarService::Service::~Service() {
}

::grpc::Status BarService::Service::GetBar(::grpc::ServerContext* context, const ::bar::v1::GetBarRequest* request, ::bar::v1::GetBarResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BarService::Service::GetBaz(::grpc::ServerContext* context, const ::bar::v1::GetBazRequest* request, ::bar::v1::GetBazResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bar
}  // namespace v1

